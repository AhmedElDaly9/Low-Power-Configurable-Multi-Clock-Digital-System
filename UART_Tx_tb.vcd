$date
	Thu Jul 07 11:21:25 2022
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	100ps
$end

$scope module UART_Tx_tb $end
$var parameter 32 ! CLK_PERIOD $end
$var reg 8 " P_DATA_tb [7:0] $end
$var reg 1 # PAR_EN_tb $end
$var reg 1 $ Data_valid_tb $end
$var reg 1 % rst_tb $end
$var reg 1 & CLK_tb $end
$var reg 1 ' PAR_TYP_tb $end
$var wire 1 ( TX_OUT_tb $end
$var wire 1 ) busy_tb $end

$scope module DUT $end
$var parameter 1 * start_bit $end
$var parameter 1 + stop_bit $end
$var wire 1 , P_DATA [7] $end
$var wire 1 - P_DATA [6] $end
$var wire 1 . P_DATA [5] $end
$var wire 1 / P_DATA [4] $end
$var wire 1 0 P_DATA [3] $end
$var wire 1 1 P_DATA [2] $end
$var wire 1 2 P_DATA [1] $end
$var wire 1 3 P_DATA [0] $end
$var wire 1 4 PAR_EN $end
$var wire 1 5 Data_valid $end
$var wire 1 6 rst $end
$var wire 1 7 CLK $end
$var wire 1 8 PAR_TYP $end
$var wire 1 ( TX_OUT $end
$var wire 1 ) busy $end
$var wire 1 9 ser_data $end
$var wire 1 : ser_en $end
$var wire 1 ; ser_done $end
$var wire 1 < mux_sel [1] $end
$var wire 1 = mux_sel [0] $end
$var wire 1 > par_bit $end

$scope module SerializerTX $end
$var wire 1 , P_DATA [7] $end
$var wire 1 - P_DATA [6] $end
$var wire 1 . P_DATA [5] $end
$var wire 1 / P_DATA [4] $end
$var wire 1 0 P_DATA [3] $end
$var wire 1 1 P_DATA [2] $end
$var wire 1 2 P_DATA [1] $end
$var wire 1 3 P_DATA [0] $end
$var wire 1 : ser_en $end
$var wire 1 6 rst $end
$var wire 1 7 CLK $end
$var wire 1 9 ser_data $end
$var wire 1 ; ser_done $end
$var reg 4 ? counter [3:0] $end
$var reg 8 @ data [7:0] $end
$upscope $end

$scope module FSMTX $end
$var parameter 2 A start_bit_sel $end
$var parameter 2 B stop_bit_sel $end
$var parameter 2 C ser_data_sel $end
$var parameter 2 D par_bit_sel $end
$var parameter 3 E IDLE $end
$var parameter 3 F S0 $end
$var parameter 3 G S1 $end
$var parameter 3 H S2 $end
$var parameter 3 I S3 $end
$var wire 1 5 Data_valid $end
$var wire 1 4 PAR_EN $end
$var wire 1 ; ser_done $end
$var wire 1 6 rst $end
$var wire 1 7 CLK $end
$var reg 2 J mux_sel [1:0] $end
$var reg 1 K ser_en $end
$var reg 1 L busy $end
$var reg 3 M current_state [2:0] $end
$var reg 3 N next_state [2:0] $end
$upscope $end

$scope module ParCalcTX $end
$var wire 1 , P_DATA [7] $end
$var wire 1 - P_DATA [6] $end
$var wire 1 . P_DATA [5] $end
$var wire 1 / P_DATA [4] $end
$var wire 1 0 P_DATA [3] $end
$var wire 1 1 P_DATA [2] $end
$var wire 1 2 P_DATA [1] $end
$var wire 1 3 P_DATA [0] $end
$var wire 1 8 PAR_TYP $end
$var wire 1 > par_bit $end
$upscope $end

$scope module MUX_TX $end
$var wire 1 < Sel [1] $end
$var wire 1 = Sel [0] $end
$var wire 1 O In0 $end
$var wire 1 P In1 $end
$var wire 1 9 In2 $end
$var wire 1 > In3 $end
$var reg 1 Q MUX_OUT $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx "
x#
0$
1%
0&
x'
bx ?
bx @
bx J
xK
xL
bx M
b0 N
0Q
b101 !
b0 *
b1 +
b0 A
b1 B
b10 C
b11 D
b0 E
b1 F
b10 G
b11 H
b100 I
0(
x)
x9
x:
x;
x=
x<
x>
x8
07
16
05
x4
x3
x2
x1
x0
x/
x.
x-
x,
1P
0O
$end
#10
0%
06
b0 ?
b0 @
b0 M
0;
09
b1 J
0K
0L
0:
0)
1=
0<
1Q
1(
#25
1&
17
#35
1%
16
#50
0&
07
#75
1&
17
#85
b11010101 "
0#
1$
13
02
11
00
1/
0.
1-
1,
04
15
b1 N
#100
0&
07
#125
1&
17
b1 M
b10 N
b0 J
1K
1L
1:
1)
0=
0Q
0(
#150
0&
07
#175
1&
17
b11010101 @
b1 ?
b10 M
19
b10 J
1<
1Q
1(
#200
0&
07
#225
1&
17
b1101010 @
b10 ?
09
0Q
0(
#250
0&
07
#275
1&
17
b110101 @
b11 ?
19
1Q
1(
#300
0&
07
#325
1&
17
b11010 @
b100 ?
09
0Q
0(
#350
0&
07
#375
1&
17
b1101 @
b101 ?
19
1Q
1(
#400
0&
07
#425
1&
17
b110 @
b110 ?
09
0Q
0(
#450
0&
07
#475
1&
17
b11 @
b111 ?
19
1Q
1(
#500
0&
07
#525
1&
17
b1 @
b1000 ?
1;
b100 N
#550
0&
07
#575
1&
17
b0 ?
b100 M
0;
b1 N
b1 J
0K
0:
1=
0<
#585
b1 "
1#
0'
01
0/
0-
0,
08
14
1>
#600
0&
07
#625
1&
17
b1 M
b10 N
b0 J
1K
1:
0=
0Q
0(
#650
0&
07
#675
1&
17
b1 ?
b10 M
b10 J
1<
1Q
1(
#700
0&
07
#725
1&
17
b0 @
b10 ?
09
0Q
0(
#750
0&
07
#775
1&
17
b11 ?
#800
0&
07
#825
1&
17
b100 ?
#850
0&
07
#875
1&
17
b101 ?
#900
0&
07
#925
1&
17
b110 ?
#950
0&
07
#975
1&
17
b111 ?
#1000
0&
07
#1025
1&
17
b1000 ?
1;
b11 N
#1035
0$
05
#1050
0&
07
#1075
1&
17
b0 ?
b11 M
0;
b100 N
b11 J
0K
0:
1=
1Q
1(
#1100
0&
07
#1125
1&
17
b